import requests
from datetime import datetime, timedelta, timezone

def fetch_leagues(api_key):
    """
    Fetch the list of leagues from the API-Football service.
    """
    url = "https://v3.football.api-sports.io/leagues"
    headers = {
        "x-apisports-key": api_key
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch leagues: {response.status_code}, Response: {response.text}")
        return None

def fetch_standings(api_key, league_id, season):
    """
    Fetch the standings for the current season.
    """
    url = f"https://v3.football.api-sports.io/standings"
    headers = {
        "x-apisports-key": api_key
    }
    params = {
        "league": league_id,
        "season": season
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch standings: {response.status_code}, Response: {response.text}")
        return None

def fetch_live_standings(api_key, league_id):
    """
    Fetch the live standings for a given league.
    """
    url = f"https://v3.football.api-sports.io/standings/live"
    headers = {
        "x-apisports-key": api_key
    }
    params = {
        "league": league_id
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch live standings: {response.status_code}, Response: {response.text}")
        return None

def fetch_fixtures(api_key, league_id, season):
    """
    Fetch the fixtures for the current season.
    """
    url = f"https://v3.football.api-sports.io/fixtures"
    headers = {
        "x-apisports-key": api_key
    }
    params = {
        "league": league_id,
        "season": season
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch fixtures: {response.status_code}, Response: {response.text}")
        return None

def fetch_live_fixtures(api_key):
    """
    Fetch live fixtures for all leagues.
    """
    url = f"https://v3.football.api-sports.io/fixtures"
    headers = {
        "x-apisports-key": api_key
    }
    params = {
        "live": "all"
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch live fixtures: {response.status_code}, Response: {response.text}")
        return None

def fetch_upcoming_fixtures(api_key, league_id, days_ahead=7):
    """
    Fetch upcoming fixtures for a given league from today up to a specified number of days ahead.
    """
    url = "https://v3.football.api-sports.io/fixtures"
    headers = {
        "x-apisports-key": api_key
    }
    today = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    end_date = (datetime.now(timezone.utc) + timedelta(days=days_ahead)).strftime('%Y-%m-%d')
    params = {
        "league": league_id,
        "from": today,
        "to": end_date
    }
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch fixtures: {response.status_code}, Response: {response.text}")
        return None

def filter_fixtures_by_date(fixtures, days_ahead=7):
    """
    Filter fixtures to include only those within the next `days_ahead` days from today.
    """
    now = datetime.now(timezone.utc)
    end_date = now + timedelta(days=days_ahead)
    filtered_fixtures = []

    for match in fixtures.get("response", []):
        fixture_date = datetime.fromisoformat(match["fixture"]["date"].replace("Z", "+00:00"))
        if now <= fixture_date <= end_date:
            filtered_fixtures.append(match)

    return filtered_fixtures

if __name__ == "__main__":
    API_KEY = "5ac618d291de54592f73b152ddb41315"
    CURRENT_SEASON = 2024  # Update this to the current year

    print("Fetching leagues...")
    leagues = fetch_leagues(API_KEY)
    if leagues:
        print("Leagues:")
        for league in leagues.get("response", [])[:5]:  # Limit to 5 leagues for display
            print(f"ID: {league['league']['id']}, Name: {league['league']['name']}")

    print("\nFetching standings for Premier League (ID: 39) in the current season...")
    standings = fetch_standings(API_KEY, league_id=39, season=CURRENT_SEASON)
    if standings:
        print("Standings:")
        for team in standings.get("response", [])[0]["league"]["standings"][0]:
            print(f"{team['rank']}. {team['team']['name']} - {team['points']} points")

    print("\nFetching fixtures for Premier League (ID: 39) in the current season...")
    fixtures = fetch_fixtures(API_KEY, league_id=39, season=CURRENT_SEASON)
    if fixtures:
        print("Upcoming Fixtures (Filtered):")
        filtered_fixtures = filter_fixtures_by_date(fixtures, days_ahead=7)
        for match in filtered_fixtures:
            home_team = match["teams"]["home"]["name"]
            away_team = match["teams"]["away"]["name"]
            date = match["fixture"]["date"]
            print(f"{date}: {home_team} vs {away_team}")

    print("\nFetching live standings for Premier League (ID: 39)...")
    live_standings = fetch_live_standings(API_KEY, league_id=39)
    if live_standings:
        print("Live Standings:")
        if live_standings.get("response"):
            for team in live_standings.get("response", [])[0]["league"]["standings"][0]:
                print(f"{team['rank']}. {team['team']['name']} - {team['points']} points")
        else:
            print("No live standings available.")

    print("\nFetching live fixtures...")
    live_fixtures = fetch_live_fixtures(API_KEY)
    if live_fixtures:
        print("Live Fixtures:")
        for match in live_fixtures.get("response", [])[:5]:  # Limit to 5 live fixtures for display
            home_team = match["teams"]["home"]["name"]
            away_team = match["teams"]["away"]["name"]
            date = match["fixture"]["date"]
            print(f"{date}: {home_team} vs {away_team}")

    print(f"\nFetching upcoming fixtures for the next 7 days...")
    upcoming_fixtures = fetch_upcoming_fixtures(API_KEY, league_id=39, days_ahead=7)
    if upcoming_fixtures:
        print("Upcoming Fixtures:")
        filtered_upcoming_fixtures = filter_fixtures_by_date(upcoming_fixtures, days_ahead=7)
        for match in filtered_upcoming_fixtures:
            home_team = match["teams"]["home"]["name"]
            away_team = match["teams"]["away"]["name"]
            date = match["fixture"]["date"]
            print(f"{date}: {home_team} vs {away_team}")
